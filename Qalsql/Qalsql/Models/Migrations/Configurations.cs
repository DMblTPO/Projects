using System.Collections.Generic;
using System.Data.Entity.Migrations;
using System.Linq;
using Microsoft.AspNet.Identity;
using Microsoft.AspNet.Identity.EntityFramework;
using Qalsql.Models.Db;

namespace Qalsql.Models.Migrations
{
    internal sealed class Configuration : DbMigrationsConfiguration<QalSqlContext>
    {
        public Configuration()
        {
            AutomaticMigrationsEnabled = false;
            ContextKey = "QalSql";
        }

        protected override void Seed(QalSqlContext context)
        {
            //if (!context.Roles.Any())
            //{
            //    RoleManager<UserRole>();
            //}

            var userAdmin = context.Users.FirstOrDefault(u => u.UserName == "admin");
            if (userAdmin == null)
            {
                var roleStore = new RoleStore<IdentityRole>(context);
                var roleManager = new RoleManager<IdentityRole>(roleStore);
                roleManager.Create(new IdentityRole {Name = "administrators" });
                roleManager.Create(new IdentityRole {Name = "users" });

                var store = new UserStore<ApplicationUser>(context);
                var manager = new UserManager<ApplicationUser>(store);
                var user = new ApplicationUser()
                {
                    UserName = "admin",
                    Email = "admin@qalsql.ua",
                    Group = 0,
                    EmailConfirmed = true,
                    TrainingMode = 0
                };
                manager.Create(user, "Password123!");

                manager.AddToRole(user.Id, "administrators");
            }

            if (!context.HwExercises.Any())
            {
                prepareExerciseRange(3, les3(), context);
                prepareExerciseRange(4, les4(), context);
                prepareExerciseRange(5, les5(), context);
                prepareExerciseRange(6, les6(), context);
                prepareExerciseRange(7, les7(), context);

                context.SaveChanges();
            }
        }

        private void prepareExerciseRange(int lId, IEnumerable<dynamic> arr, QalSqlContext context)
        {
            var i = 0;
            var l = arr
                .Select(
                    x =>
                        new HwExercise
                        {
                            LessonId = lId,
                            ExerciseNum = ++i,
                            Conditions = x.descr,
                            QueryCheck = x.query
                        });
            context.HwExercises.AddRange(l);
        }

        private IEnumerable<dynamic> les3()
        {
            return new dynamic[]
            {
                new
                {
                    descr = "Напишите один запрос с использованием псевдонимов для таблиц и псевдонимов полей, " +
                            "выбирающий все возможные комбинации городов (CITY) из таблиц " +
                            "<ul>"+
                            "<li><i>STUDENTS</i>: для первокурсниц</li>" +
                            "<li><i>LECTURERS</i>: с кодами университетов 1 и 2</li>"+
                            "<li><i>UNIVERSITIES</i>: с рейтингом менее 400</li>"+
                            "</ul>" +
                            "Строки не должны повторяться, убедитесь в выводе только уникальных комбинаций городов. " +
                            "<br>" +
                            "<strong>Внимание</strong>: убедитесь, что каждая колонка выборки имеет свое уникальное имя.",
                    query = "select distinct s.city as s_city, l.city as l_city, u.city as u_city " +
                            "from students s, lecturers l, universities u " +
                            "where s.gender='f' and s.course=1 and " +
                            "l.univ_id<3 and " +
                            "u.rating<400"
                },
                new
                {
                    descr = "Напишите запрос для вывода полей из таблицы <i>SUBJECTS</i> в следущем порядке: семестр, в котором он " +
                            "читается, начиная с 3го, идентификатора (номера ID) предмета обучения, его наименования и " +
                            "количества отводимых на этот предмет часов.",
                    query = "select semester, id, name, hours from subjects where semester>2"
                },
                new
                {
                    descr = "Выведите все строки таблицы <i>EXAM_MARKS</i>, в которых предмет обучения <i>SUBJ_ID</i> равен 4 с полученной оценкой 3.",
                    query = "select * from exam_marks where subj_id=4 and mark=3"
                },
                new
                {
                    descr = "Необходимо выбирать все данные, в следующем порядке<br> " +
                            "<i>Стипендия, Курс, Фамилия, Имя</i><br>из таблицы <i>STUDENTS</i>, причем интересуют " +
                            "студенты, родившиеся после '1993-07-21'.",
                    query = "select stipend, course, surname, name from students where birthday>'1993-07-21'"
                },
                new
                {
                    descr = "Вывести на экран все предметы: их наименования и кол-во часов для каждого из них " +
                            "в 1-м семестре и при этом кол-во часов не должно превышать 41.",
                    query = "select name, hours from  subjects where semester=1 and hours<40"
                },
                new
                {
                    descr = "Напишите запрос, позволяющий вывести из таблицы <i>EXAM_MARKS</i> уникальные " +
                            "значения экзаменационных оценок, которые были получены '2012-06-12'.",
                    query = "select distinct mark from exam_marks where exam_date='2012-06-12'"
                },
                new
                {
                    descr = "Выведите список фамилий студентов, обучающихся на третьем и последующих " +
                            "курсах и при этом проживающих не в Киеве, не Харькове и не Львове. ",
                    query = "select surname from students where course>2 and city not in ('Киев','Харьков','Львов')"
                },
                new
                {
                    descr = "Покажите данные о фамилии, имени и номере курса для студентов, " +
                            "получающих стипендию в диапазоне от 500 до 650, не включая " +
                            "эти граничные суммы. Попробуйте решить эту задачу несколькими способами.",
                    query = "select surname, name, course from students where stipend>500 and stipend<650"
                },
                new
                {
                    descr = "Напишите запрос, выполняющий выборку из таблицы <i>LECTURERS</i> всех имен и фамилий " +
                            "преподавателей, проживающих во Львове, либо же преподающих в университете " +
                            "с идентификатором 14 ",
                    query = "select name, surname from lecturers where city='Львов' or univ_id=14"
                },
                new
                {
                    descr = "Выясните в каких городах (названия) расположены университеты,  " +
                            "рейтинг которых составляет 528 +/- 47 баллов. ",
                    query = "select distinct city from universities where rating between 528 - 47 and 528 + 47"
                },
                new
                {
                    descr = "Отобрать список фамилий киевских студентов, их стипендий и дат рождений " +
                            "для всех нечетных курсов. ",
                    query = "select surname, stipend, birthday from students where city='киев' and course%2=1"
                }
            };

        }

        private IEnumerable<dynamic> les4()
        {
            return new dynamic[]
            {
                new
                {
                    descr = "<p>Составьте запрос для таблицы STUDENT таким образом, чтобы выходная таблица " +
                            "содержала один столбец типа varchar, содержащий последовательность разделенных " +
                            "символом ';' (точка с запятой) значений столбцов этой таблицы, и при этом " +
                            "текстовые значения должны отображаться прописными символами (верхний регистр), " +
                            "то есть быть представленными в следующем виде:</p>" +
                            "<pre>" +
                            "1;КАБАНОВ;ВИТАЛИЙ;M;550.00;4;ХАРЬКОВ;01/12/1990;2\n" +
                            "..." +
                            "</pre>" +
                            "<p><strong>Примечание</strong>: в выборку должны попасть студенты из любого города из 5 букв.</p>",
                    query = "select upper(concat(id,';',surname,';',name,';',gender,';',stipend,';',course,';',city,';',isnull(format(birthday,'dd/MM/yyyy'),'*'),';',univ_id)) " +
                            "from students where len(city)=5"
                },
                new
                {
                    descr =
                    "<p>Составьте запрос для таблицы STUDENT таким образом, чтобы выходная таблица " +
                    "содержала всего один столбец в следующем виде:</p>" +
                    "<pre>" +
                    "Р.БЕРЕЗОВСКИЙ; местожительства-КИЕВ; родился-09.03.92\n" +
                    "... " +
                    "</pre>" +
                    "<p><strong>Примечание</strong>: в выборку должны попасть студенты, фамилия которых содержит вторую " +
                    "букву 'е' и предпоследнюю букву 'и', либо же фамилия заканчивается на 'ц'.</p>",
                    query = "select concat(left(name,1),'.',upper(surname),'; местожительства-',upper(city),'; родился-',isnull(format(birthday,'dd.MM.yy'),'*')) " +
                            "from students where surname like '_е%и_' or surname like '%ц'"
                },
                new
                {
                    descr =
                    "<p>Составьте запрос для таблицы STUDENT таким образом, чтобы выходная таблица " +
                    "содержала всего один столбец в следующем виде:</p>" +
                    "<pre>" +
                    "и.павленко; родом из г.Киев; учится на I курсе\n" +
                    "... " +
                    "</pre>" +
                    "<p><strong>Примечание</strong>: курс указать римскими цифрами (воспользуйтесь CASE), " +
                    "отобрать студентов, стипендия которых кратна 200.</p>",
                    query = "select concat(lower(left(name,1)),'.',lower(surname),'; родом из г.',city,'; учится на '," +
                            "case course when 1 then 'I' when 2 then 'II' when 3 then 'III' when 4 then 'IV' when 5 then 'V' end,' курсе') " +
                            "from students where stipend%200=0"
                },
                new
                {
                    descr =
                    "<p>Составьте запрос для таблицы STUDENT таким образом, чтобы выборка " +
                    "содержала столбец в следующего вида:</p>" +
                    "<pre>" +
                    "Нина Федосеева из г.Днепропетровск родилась в 1992 году\n" +
                    "...\n" +
                    "Артур Винник из г.Ивано-Франковск родился в 1990 году\n" +
                    "... " +
                    "</pre>" +
                    "<p><strong>Примечание</strong>: для всех городов, в которых более 8 букв.</p>",
                    query = "select concat(name,' ',surname,' из г.',city,' '," +
                            "case GENDER when 'f' then 'родилась' else 'родился' end,' в ',year(birthday),' году') " +
                            "from students where len(city)>8"
                },
                new
                {
                    descr =
                    "Вывести фамилии, имена студентов из Ровно и величину получаемых ими стипендий, " +
                    "при этом значения стипендий первокурсников должны быть увеличены на 17.5% ",
                    query = "select concat(surname,' ',name,' ',cast(case course when 1 then stipend*1.175 else stipend end as decimal(10,2))) " +
                            "from students where city='Ровно'"
                },
                new
                {
                    descr =
                    "<p>Составьте запрос для таблицы UNIVERSITY таким образом, чтобы выходная таблица " +
                    "содержала всего один столбец в следующем виде:</p>" +
                    "<pre>" +
                    "Код-1;КПИ-г.Киев;Рейтинг относительно ДНТУ(501): +756\n" +
                    "...\n" +
                    "Код-12;ТНТУ-г.Тернополь;Рейтинг относительно ДНТУ(501): -60\n" +
                    "..." +
                    "</pre>" +
                    "<p><strong>Примечание</strong>: рейтинг вычислить относительно ДНТУшного, а также должен " +
                    "присутствовать знак (+/-), рейтинг ДНТУ заранее известен = 501.</p>",
                    query = "select concat('Код-',id,';',name,'-г.',city,';Рейтинг относительно ДНТУ(501): '," +
                            "case when rating-501>0 then '+' else '' end,rating-501) from universities"
                },
                new
                {
                    descr =
                    "<p>Составьте запрос для таблицы UNIVERSITY таким образом, чтобы выходная таблица " +
                    "содержала всего один столбец в следующем виде:</p>" +
                    "<pre>" +
                    "Рейтинг КПИ состоит из 12 сотен\n" +
                    "Рейтинг КНУ состоит из 6 сотен\n" +
                    "... " +
                    "</pre>" +
                    "<p><strong>Примечание</strong>: в рейтинге необходимо указать кол-во сотен.</p>",
                    query = "select concat('Рейтинг ',name,' состоит из ',rating/100,' сотен') from universities"
                }
            };

        }

        private IEnumerable<dynamic> les5()
        {
            return new dynamic[]
            {
                new {descr = "Отобразите для каждого из курсов количество парней и девушек. ", query = "select 1"},
                new
                {
                    descr = "Напишите запрос для таблицы EXAM_MARKS, выдающий даты, для которых средний балл " +
                            "находиться в диапазоне от 4.22 до 4.77. Формат даты для вывода на экран: " +
                            "день месяць, например, 05 Jun. ",
                    query = "select 1"
                },
                new
                {
                    descr = "Напишите запрос, который по таблице EXAM_MARKS позволяет найти промежуток времени (*), " +
                            "который занял у студента в течении его сессии, кол-во всех попыток сдачи экзаменов, " +
                            "а также их максимальные и минимальные оценки. В выборке дожлен присутствовать " +
                            "идентификатор студента. " +
                            "Примечание: таблица оценок - покрывает одну сессию, (*) промежуток времени -" +
                            "количество дней, которые провел студент на этой сессии - от первого до " +
                            "последнего экзамена включительно " +
                            "Примечание-2: функция DAY() для решения не подходит! ",
                    query = "select 1"
                },
                new
                {
                    descr = "Покажите список идентификаторов студентов, которые имеют пересдачи. ",
                    query = "select 1"
                },
                new
                {
                    descr = "Напишите запрос, отображающий список предметов обучения, вычитываемых за самый короткий " +
                            "промежуток времени, отсортированный в порядке убывания семестров. Поле семестра в " +
                            "выходных данных должно быть первым, за ним должны следовать наименование и " +
                            "идентификатор предмета обучения. ",
                    query = "select 1"
                },
                new
                {
                    descr =
                    "Напишите запрос с подзапросом для получения данных обо всех положительных оценках(4, 5) Марины " +
                    "Шуст (предположим, что ее персональный номер неизвестен), идентификаторов предметов и дат " +
                    "их сдачи. ",
                    query = "select 1"
                },
                new
                {
                    descr =
                    "Покажите сумму баллов для каждой даты сдачи экзаменов, при том, что средний балл не равен " +
                    "среднему арифметическому между максимальной и минимальной оценкой. Данные расчитать только " +
                    "для студенток. Результат выведите в порядке убывания сумм баллов, а дату в формате dd/mm/yyyy. ",
                    query = "select 1"
                },
                new
                {
                    descr = "Покажите имена и фамилии всех студентов, у которых средний балл по предметам " +
                            "с идентификаторами 1 и 2 превышает средний балл этого же студента " +
                            "по всем остальным предметам. Используйте вложенные подзапросы, а также конструкцию " +
                            "AVG(case...), либо коррелирующий подзапрос. " +
                            "Примечание: может так оказаться, что по 'остальным' предметам (не 1ый и не 2ой) не было " +
                            "получено ни одной оценки, в таком случае принять средний бал за 0 - для этого можно " +
                            "использовать функцию ISNULL(). ",
                    query = "select 1"
                },
                new
                {
                    descr = "Напишите запрос, выполняющий вывод общего суммарного и среднего баллов каждого " +
                            "экзаменованого второкурсника, его идентификатор и кол-во полученных оценок при условии, " +
                            "что он успешно сдал 3 и более предметов. ",
                    query = "select 1"
                },
                new
                {
                    descr = "Вывести названия всех предметов, средний балл которых превышает средний балл по всем " +
                            "предметам университетов г.Днепропетровска. Используйте вложенные подзапросы.",
                    query = "select 1"
                }
            };

        }

        private IEnumerable<dynamic> les6()
        {
            return new dynamic[]
            {

                new
                {
                    descr = "Напишите запрос с EXISTS, позволяющий вывести данные обо всех студентах, " +
                            "обучающихся в вузах с рейтингом не попадающим в диапазон от 488 до 571 ",
                    query = "select 1"
                },
                new
                {
                    descr =
                    "Напишите запрос с EXISTS, выбирающий всех студентов, для которых в том же городе, " +
                    "где живет и учится студент, существуют другие университеты, в которых он не учится. ",
                    query = "select 1"
                },
                new
                {
                    descr =
                    "Напишите запрос, выбирающий из таблицы SUBJECTS данные о названиях предметов обучения, " +
                    "экзамены по которым были хоть как-то сданы более чем 12 студентами, за первые 10 дней сессии. " +
                    "Используйте EXISTS. Примечание: по возможности выходная выборка должна быть без пересдач. ",
                    query = "select 1"
                },
                new
                {
                    descr =
                    "Напишите запрос EXISTS, выбирающий фамилии всех лекторов, преподающих в университетах " +
                    "с рейтингом, превосходящим рейтинг каждого харьковского универа. ",
                    query = "select 1"
                },
                new
                {
                    descr =
                    "Напишите 2 запроса, использующий ANY и ALL, выполняющий выборку данных о студентах, " +
                    "у которых в городе их постоянного местожительства нет университета. ",
                    query = "select 1"
                },
                new
                {
                    descr =
                    "Напишите запрос выдающий имена и фамилии студентов, которые получили " +
                    "максимальные оценки в первый и последний день сессии. " +
                    "Подсказка: выборка должна содержать по крайне мере 2х студентов. ",
                    query = "select 1"
                },
                new
                {
                    descr =
                    "Напишите запрос EXISTS, выводящий кол-во студентов каждого курса, которые успешно " +
                    "сдали экзамены, и при этом не получивших ни одной двойки. ",
                    query = "select 1"
                },
                new
                {
                    descr =
                    "Напишите запрос EXISTS на выдачу названий предметов обучения, " +
                    "по которым было получено максимальное кол-во оценок. ",
                    query = "select 1"
                },
                new
                {
                    descr =
                    "Напишите команду, которая выдает список фамилий студентов по алфавиту, " +
                    "с колонкой комментарием: 'успевает' у студентов , имеющих все положительные оценки, " +
                    "'не успевает' для сдававших экзамены, но имеющих хотя бы одну " +
                    "неудовлетворительную оценку, и комментарием 'не сдавал' – для всех остальных. " +
                    "Примечание: по возможности воспользуйтесь операторами ALL и ANY. ",
                    query = "select 1"
                },
                new
                {
                    descr = "Создайте объединение двух запросов, которые выдают значения полей " +
                            "NAME, CITY, RATING для всех университетов. Те из них, у которых рейтинг " +
                            "равен или выше 500, должны иметь комментарий 'Высокий', все остальные – 'Низкий'. ",
                    query = "select 1"
                },
                new
                {
                    descr =
                    "Напишите UNION запрос на выдачу списка фамилий студентов 4-5 курсов в виде 3х полей выборки: " +
                    "SURNAME, 'студент <значение поля COURSE> курса', STIPEND " +
                    "включив в список преподавателей в виде " +
                    "SURNAME, 'преподаватель из <значение поля CITY>', <значение зарплаты в зависимости от города проживания (придумать самим)> " +
                    "отсортировать по фамилии " +
                    "Примечание: достаточно учесть 4-5 городов. ",
                    query = "select 1"
                }
            };
        }

        private IEnumerable<dynamic> les7()
        {
            return new dynamic[]
            {
                new
                {
                    descr = "Напишите запрос, выдающий список фамилий преподавателей английского " +
                            "языка с названиями университетов, в которых они преподают. " +
                            "Отсортируйте запрос по городу, где расположен университ, а " +
                            "затем по фамилии лектора. ",
                    query = "select 1"
                },
                new
                {
                    descr =
                    "Напишите запрос, который выполняет вывод данных о фамилиях, сдававших экзамены " +
                    "студентов, учащихся в Б.Церкви, вместе с наименованием каждого сданного ими предмета, " +
                    "оценкой и датой сдачи. ",
                    query = "select 1"
                },
                new
                {
                    descr =
                    "Используя оператор JOIN, выведите объединенный список городов с указанием количества " +
                    "учащихся в них студентов и преподающих там же преподавателей. ",
                    query = "select 1"
                },
                new
                {
                    descr =
                    "Напишите запрос который выдает фамилии всех преподавателей и наименование предметов, " +
                    "которые они читают в КПИ ",
                    query = "select 1"
                },
                new
                {
                    descr =
                    "Покажите всех студентов-двоешников, кто получил только неудовлетворительные оценки (2) " +
                    "и по каким предметам, а также тех кто не сдал ни одного экзамена. " +
                    "В выходных данных должны быть приведены фамилии студентов, названия предметов и " +
                    "оценка, если оценки нет, заменить ее на прочерк. ",
                    query = "select 1"
                },
                new
                {
                    descr =
                    "Напишите запрос, который выполняет вывод списка университетов с рейтингом, " +
                    "превышающим 490, вместе со значением максимального размера стипендии, " +
                    "получаемой студентами в этих университетах. ",
                    query = "select 1"
                },
                new
                {
                    descr =
                    "Расчитать средний бал по оценкам студентов для каждого университета, " +
                    "умноженный на 100, округленный до целого, и вычислить разницу с текущим значением " +
                    "рейтинга университета. ",
                    query = "select 1"
                },
                new
                {
                    descr =
                    "Написать запрос, выдающий список всех фамилий лекторов из Киева попарно. " +
                    "При этом не включать в список комбинации фамилий самих с собой, " +
                    "то есть комбинацию типа 'Коцюба-Коцюба', а также комбинации фамилий, " +
                    "отличающиеся порядком следования, т.е. включать лишь одну из двух " +
                    "комбинаций типа 'Хижна-Коцюба' или 'Коцюба-Хижна'. ",
                    query = "select 1"
                },
                new
                {
                    descr =
                    "Выдать информацию о всех университетах, всех предметах и фамилиях преподавателей, " +
                    "если в университете для конкретного предмета преподаватель отсутствует, то его фамилию " +
                    "вывести на экран как прочерк '-' (воспользуйтесь ф-ей isnull) ",
                    query = "select 1"
                },
                new
                {
                    descr = "Кто из преподавателей и сколько поставил пятерок за свой предмет? " +
                            "Добавка для уверенных в себе студентов: показать кому из студентов какие экзамены " +
                            "еще досдать. ",
                    query = "select 1"
                }
            };
        }
    }
}